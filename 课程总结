一、HelloWorld

	1、创建项目文件时没有web.xml的问题：
		在创建项目文件的时候不直接finish，而是点击next，有一个自动生成web.xml的选项
		
	2、在wen.xml中配置DispatcherServlet时，没有提示（已安装springide):
		先输入<，然后按alt+/，然后删除<，翻到最下面，就有提示了
		
	3、在src下创建springmvc.xml的时候，点击next添加bean、contxt、mvc这三个命名空间
	
	4、配置文件中的class文件名不提示：
		在首选项中设置xml——>xml flie——>editor——>content assist的代码提示修改
		为全部单词
	
	5.其他配置都是正确的，然而不能正常跳转的时：
		可以看一下web.xml的位置是否正确，一般web.xml是放在WEB-INF中，可以直接系统生
		成
		
二、RequestMapping
	
	1、RequestMapping修饰类
		RequestMapping既可以修饰方法，也可以修饰类。修饰方法时，直接是相对于/WEB-INF的根目录
		而如果是修饰类的话，则类上的mapping相对于/WEB-INF，提供初步的路径映设，然后方法上的mapping
		提供进一步路径
		
	2、RequestMapping的method参数
		@RequestMapping(value="/requestMethodTest",method=RequestMethod.POST)
		可以通过设置metho参数，实现拦截get或post请求
	
	3、还可以使用params和headers筛选请求参数和请求头
	
	4、RequestMapping的URL映射还支持Ant风格：
		?	表示匹配文件中的一个字符
		*	表示匹配文件中的多个字符（测试后发现至少要有一个）
		**	表示多层路径，也就是这个符号的所在位置将能够有任意层的字符（可以0到无穷）
	
	5、PathVariable可以映射url中的占位符到目标方法的参数中去
		@RequestMapping(value="/requestVariableTest/{num}",method=RequestMethod.GET)
		public String hello4(@PathVariable("num") String number) {
		}
		这样可以将url地址所带的占位符的值传入方法中
		
三、HiddenHttpMethodFilter
	
	1、Server Tomcat v8.0 Server at localhost failed to start，删除tomcat项目重启无效:
		原因可能是filter配置出错
	
	2、@Component与@Controller的区别
		@Controller注解是一个特殊的Component，它允许了实现类可以通过扫描类配置路径的方式完成自动注
		入，通常@Controller是结合@RequestMapping注解一起使用的。
		这两个只是在springMVC中才有区别，因为mvc的扫描问题，后面再补充。在spring中是相同的。
		
	3-1、在提交时如何设置表单让其识别需要转换的post请求
		在表单中添加一个“hidden”属性，让框架能够自动识别，并且重新封装转发
		<input type="hidden" name="_method" value="DELETE"/>
		or
		<input type="text" name="_method" value="put"/>
		
	3-2、在上一步之前，还需要配置HiddenHttpMethodFilter
		<filter>
			<filter-name>HiddenHttpMethodFilter</filter-name>
			<filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
		</filter>
		<filter-mapping>
			<filter-name>HiddenHttpMethodFilter</filter-name>
			<url-pattern>/*</url-pattern>
		</filter-mapping>
		
	4、SpringMVC转发到jsp时出现405错误：JSPs only permit GET POST or HEAD
		三种简单处理的办法！
		第一：tomcat换到7.0以及以下版本
		第二：请求先转给一个Controller,再返回jsp页面
		第三种：在success页面头部文件将
		    <%@ page language="java" contentType="text/html; charset=UTF-8"
		    pageEncoding="UTF-8" isErrorPage="true"%>
		    多加一句话：isErrorPage设置为true，默认为false
		第四种：在RequestMapping中添加@ResponseBody（这种方法直接返回的是json数据，并不能转发到jsp页面中去
		原理是：在Tomcat的8这个版本，为了安全起见，将delete方法给拦截屏蔽了，不让使用（不知正确与否）
		
	5、附带解释@ResponseBody
		@Responsebody 注解表示该方法的返回的结果直接写入 HTTP 响应正文（ResponseBody）中，一般在异步获取数
		据时使用，通常是在使用 @RequestMapping 后，返回值通常解析为跳转路径，加上 @Responsebody 后返回结果
		不会被解析为跳转路径，而是直接写入HTTP 响应正文中。 
		作用： 
		该注解用于将Controller的方法返回的对象，通过适当的HttpMessageConverter转换为指定格式后，写入到
		Response对象的body数据区。 
		使用时机： 
		返回的数据不是html标签的页面，而是其他某种格式的数据时（如json、xml等）使用
		
	6、@RequestParam映射请求参数
		value		是指参数的名称
		require		是表明是否需要这个参数
		defaultValue是指默认的参数值是多少
		
	7、映射请求头信息@RequestHeader
		value为所需要的请求头参数名
		
	8、了解：@CookieValue映射一个cookie值
	
	***快速打開bean的getter、setter構造***
		alt+shift+s
	***快速运行项目***
		alt+shift+x r
		
	9、使用POJO绑定请求参数值：
		首先建立好相应的bean文件，然后在方法的请求参数中添加相应的bean对象
		springmvc框架能够自动扫描并将请求拦截，自动传递这个对象值
		
		关于联查，比如一个User一个User所在的Address，可以先在User中添加
		Address对象，然后在表单添加的时候通过address.city的方式向
		address传递相应的值
		
	10、SpringMvc可以使用的原生api：
		找ppt，然后添加进去
		
	11、ModelAndView处理模型数据：
		controller的方法可以返回ModelAndView类型，可以在其中添加视图名以及
		数据模型，数据模型会被添加到request域对象中去
		example：
			public ModelAndView modelAndViewTest() {
				ModelAndView modelAndView = new ModelAndView("success");
				modelAndView.addObject("time",new Date());
				return modelAndView;
			}
	
	12、目标方法也可以添加map类型的参数：
		这个map也会被添加到requestScope域对象中去
			@RequestMapping("/mapTest")
			public String mapTest(Map<String, Object> map) {
				map.put("name", Arrays.asList("tom","bob","fun"));
				return "success";
			}
		
	13、如何添加模型数据或map数据到session域对象中@SessionAttributes：
		在目标方法的类上面添加@SessionAttributes注解
		注解有value和type属性，分别对应map中的key，value的类型
		@SessionAttributes(value="player", types=String.class)
	
	14、JstlView关于国际化：
		可以在配置文件中添加
		<bean id="messageSource"
		 class="org.springframework.context.support.ResourceBundleMessageSource">
		 	<property name="basename" value="i18n"></property>
		</bean>
		在jsp页面中添加fmt标签
		<%@taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt"%>
		<fmt:message key="i18n.password"></fmt:message>
		添加basebame.properties的文件，basename用后面的value值取代
		i18n.password=\u5BC6\u7801
		通过上面三个步骤来配置国际化文件，同时创建相应的文字value，实现不同国家访问出现不同展示页
		basename可以任意命名
		
	15、关于直接转发到目标页面，而不经过controller：
		直接配置mvc:view-controller，添加上路径名便可
		<mvc:view-controller path="/success" view-name="success"/>
		这时按照原来的方法访问controller再跳转到目标页面是行不通的，这个时候就需要添加mvc:annotation-driven
	 	<mvc:annotation-driven></mvc:annotation-driven>
		这个时候便能够通过两种方式进行访问
		
	16、自定义视图（它和非自定义的有什么不同呢？它有什么用呢？）
		首先配置自己的视图，实现view接口，添加到spring容器中，配置BeanNameViewResolver解析器
		设置优先级，就可以用了
		大致意思就是在return的时候，不是将返回的字符串转换成url，而是直接转发到一个视图类中去处理
		
	17、关于重定向与转发：
		默认情况下是直接转发的，如果要让跳转方式更改为重定向的话，需要在return语句中添加redirect
		同理，如果需要转发，也可以添加forward
		
	
		
		
	
	
			